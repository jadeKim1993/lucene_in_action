plugins {
  id 'lucene-in-action-config'
}

dependencies {
  testImplementation project(':analysis')

  implementation project(':common')
  implementation "org.apache.lucene:lucene-highlighter:${luceneVersion}"
  implementation "org.apache.lucene:lucene-suggest:${luceneVersion}"
}

tasks.register('createSpellCheckerIndex', JavaExec) {
  dependsOn(['classes', ':meetlucene:indexer'])
  mainClass = 'lia.CreateSpellCheckerIndex'
  classpath = sourceSets.main.runtimeClasspath
  args "${getRootDir()}/spellIndex", "${getRootDir()}/index/", project.hasProperty("field") ? project.getProperties().get("field") : "contents"
}

tasks.register('spellCheckerExample', JavaExec) {
  dependsOn(['classes', 'createSpellCheckerIndex'])
  mainClass = 'lia.SpellCheckerExample'
  classpath = sourceSets.main.runtimeClasspath
  args "${getRootDir()}/spellIndex", project.hasProperty("word") ? project.getProperties().get("word") : "frie"
}

tasks.register('ngramFilter', JavaExec) {
  mainClass = 'lia.NGramFilterSample'
  classpath = sourceSets.main.runtimeClasspath
  args project.hasProperty("word") ? project.getProperties().get("word") : "lettuce"
}

tasks.register('highlight', JavaExec) {
  mainClass = 'lia.HighlightIt'
  classpath = sourceSets.main.runtimeClasspath
  args project.hasProperty("word") ? project.getProperties().get("word") : "term"
}
